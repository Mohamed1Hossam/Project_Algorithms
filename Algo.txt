Algorithm MaxProductLinearScanRecursive(nums)
{
    Return Recurse(nums, 0, -∞, -∞, -∞, ∞, ∞)
}

Algorithm Recurse(nums, index, max1, max2, max3, min1, min2)
{
    If index = length(nums) then
    {
        product1 := max1 * max2 * max3
        product2 := min1 * min2 * max1
        Return Maximum(product1, product2)
    }

    num := nums[index]

    If num >= max1 then
    {
        max3 := max2
        max2 := max1
        max1 := num
    }
    Else if num >= max2 then
    {
        max3 := max2
        max2 := num
    }
    Else if num >= max3 then
    {
        max3 := num
    }

    If num <= min1 then
    {
        min2 := min1
        min1 := num
    }
    Else if num <= min2 then
    {
        min2 := num
    }

    Return Recurse(nums, index + 1, max1, max2, max3, min1, min2)
}

Time Complexity: O(n), where n is the length of the input array.

------------------------------------------------------------------------------------------------------------------------------------------

Heap Approach Pseudocode:

Algorithm MaxProductHeap(nums)
{
    largest_three := FindNLargest(nums, 3);

    smallest_two := FindNSmallest(nums, 2);

    product1 := largest_three[0] * largest_three[1] * largest_three[2];
    product2 := smallest_two[0] * smallest_two[1] * largest_three[0];

    Return Maximum(product1, product2);
}

Algorithm FindNLargest(nums, n)
{
    maxHeap := CreateMaxHeap(nums);

    result := [];
    For i := 1 to n step 1 do
    {
        If NOT IsEmpty(maxHeap) then
        {
            result.append(ExtractMax(maxHeap));
        }
    }

    Return result;
}

Algorithm FindNSmallest(nums, n)
{
    minHeap := CreateMinHeap(nums);

    result := [];
    For i := 1 to n step 1 do
    {
        If NOT IsEmpty(minHeap) then
        {
            result.append(ExtractMin(minHeap));
        }
    }

    Return result;
}

Time Complexity:
O(n): Building the heap takes O(n), and extracting the top elements takes O(log n) for each extraction.
